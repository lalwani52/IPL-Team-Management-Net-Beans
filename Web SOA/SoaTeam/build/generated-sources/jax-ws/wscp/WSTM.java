
package wscp;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "WSTM", targetNamespace = "http://WSTMp/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface WSTM {


    /**
     * 
     * @param cho
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "revoke", targetNamespace = "http://WSTMp/", className = "wscp.Revoke")
    @ResponseWrapper(localName = "revokeResponse", targetNamespace = "http://WSTMp/", className = "wscp.RevokeResponse")
    @Action(input = "http://WSTMp/WSTM/revokeRequest", output = "http://WSTMp/WSTM/revokeResponse")
    public String revoke(
        @WebParam(name = "cho", targetNamespace = "")
        int cho);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.Integer>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAmt", targetNamespace = "http://WSTMp/", className = "wscp.GetAmt")
    @ResponseWrapper(localName = "getAmtResponse", targetNamespace = "http://WSTMp/", className = "wscp.GetAmtResponse")
    @Action(input = "http://WSTMp/WSTM/getAmtRequest", output = "http://WSTMp/WSTM/getAmtResponse")
    public List<Integer> getAmt();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "playerDetails", targetNamespace = "http://WSTMp/", className = "wscp.PlayerDetails")
    @ResponseWrapper(localName = "playerDetailsResponse", targetNamespace = "http://WSTMp/", className = "wscp.PlayerDetailsResponse")
    @Action(input = "http://WSTMp/WSTM/playerDetailsRequest", output = "http://WSTMp/WSTM/playerDetailsResponse")
    public List<String> playerDetails();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "avail", targetNamespace = "http://WSTMp/", className = "wscp.Avail")
    @ResponseWrapper(localName = "availResponse", targetNamespace = "http://WSTMp/", className = "wscp.AvailResponse")
    @Action(input = "http://WSTMp/WSTM/availRequest", output = "http://WSTMp/WSTM/availResponse")
    public List<String> avail();

    /**
     * 
     * @param choice
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sign", targetNamespace = "http://WSTMp/", className = "wscp.Sign")
    @ResponseWrapper(localName = "signResponse", targetNamespace = "http://WSTMp/", className = "wscp.SignResponse")
    @Action(input = "http://WSTMp/WSTM/signRequest", output = "http://WSTMp/WSTM/signResponse")
    public String sign(
        @WebParam(name = "choice", targetNamespace = "")
        int choice);

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://WSTMp/", className = "wscp.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://WSTMp/", className = "wscp.HelloResponse")
    @Action(input = "http://WSTMp/WSTM/helloRequest", output = "http://WSTMp/WSTM/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

}
